<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MathFuncConsole</name>
    </assembly>
    <members>
        <member name="P:MathFuncConsole.MathObjects.Applications.HullWhiteModel.A">
            <summary>
            Alpha of HW model
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.HullWhiteModel.Sigma">
            <summary>
            Sigma of HW model
            </summary>
        </member>
        <member name="T:MathFuncConsole.MathObjects.Applications.EquationSet">
            <summary>
            A group of equations and their variables.
            </summary>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.EquationSet.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initial instance of <see cref="T:MathFuncConsole.MathObjects.Applications.EquationSet"/>
            </summary>
            <param name="name">Name of this equation set</param>
            <param name="vars">A list of variable names</param>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.EquationSet.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Func{System.Double}},System.Collections.Generic.HashSet{System.Func{System.Double}})">
            <summary>
            Initial instance of <see cref="T:MathFuncConsole.MathObjects.Applications.EquationSet"/>
            </summary>
            <param name="name">Name of this equation set</param>
            <param name="vars">A dictionary of variable names and their value/reference</param>
            <param name="equations">A group of equations</param>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.EquationSet.AddEquation(System.Func{System.Double})">
            <summary>
            Add a equation into equation set
            </summary>
            <param name="eq">New equation</param>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.EquationSet.ObjectiveFunc">
            <summary>
            Generate objective function of this equation set for optimization algorithms
            </summary>
            <returns>Objective function</returns>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.EquationSet.RemoteSetter(System.String)">
            <summary>
            Universal setter method without reference to the instance. To set value, input must be <see cref="T:System.Double"/>.
            Remote setter is designed for generic computation methods.
            </summary>
            <param name="varName">Name of the target variable</param>
            <returns>A setter that you can assign new value to target variable</returns>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.EquationSet.RemoteGetter(System.String)">
            <summary>
            Universal getter method without reference to the instance. 
            Remote setter is designed for generic computation methods.
            </summary>
            <param name="varName">Name of the target variable</param>
            <returns>A getter that you can get new value from target variable</returns>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.EquationSet.Item(System.String)">
            <summary>
            Get or set value for variables in this equation set
            </summary>
            <param name="varName">Name of the target variable</param>
            <returns>Value of the variable</returns>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.EquationSet.AddEquations(System.Collections.Generic.ICollection{System.Func{MathFuncConsole.MathObjects.Applications.EquationSet,System.Func{System.Double}}})">
            <summary>
            Add equations into this equation set
            </summary>
            <param name="equations">A set of equations</param>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.EquationSet.SaaSolver(System.String[],System.Func{MathFuncConsole.MathObjects.Applications.EquationSet,System.Func{System.Double}}[],System.Collections.Generic.IReadOnlyCollection{System.},System.Int32,System.Double,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Generate a multi-thread Simulated Annealing Algorithm (SAA) solver for an equation set
            </summary>
            <param name="vars">Name of variables</param>
            <param name="equations">Equations (functions that need to reach zero value)</param>
            <param name="range">Lower and Upper bound for each variables</param>
            <param name="n">Number of threads in SAA</param>
            <param name="temperature">Initial temperature in SAA</param>
            <param name="iters">Total iterations in SAA</param>
            <param name="cooliter">Cooling cycle in SAA</param>
            <param name="debug">Debug output in SAA</param>
            <returns>A SAA solver of the equation set</returns>
        </member>
        <member name="T:MathFuncConsole.MathObjects.Applications.EuropeanCallOption">
            <summary>
            Abstraction of European call options
            </summary>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.EuropeanCallOption.#ctor(System.String,MathFuncConsole.MathObjects.Applications.Stock,System.Object,System.Object,System.Object)">
            <summary>
            Initial instance of <see cref="T:MathFuncConsole.MathObjects.Applications.EuropeanCallOption"/>
            </summary>
            <param name="name">Name of the option</param>
            <param name="stock">Underlying stock</param>
            <param name="strike">Strike price</param>
            <param name="riskFree">Risk-free rate</param>
            <param name="maturity">Maturity of the option</param>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.EuropeanCallOption.#ctor(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Initial instance of <see cref="T:MathFuncConsole.MathObjects.Applications.EuropeanCallOption"/>
            </summary>
            <param name="name">Name of the option</param>
            <param name="stockP">Current stock price</param>
            <param name="strike">Strike price</param>
            <param name="riskFree">Risk-free rate</param>
            <param name="maturity">Maturity of the option</param>
            <param name="sigma">Sigma of the stock, pass <see langword="null"/> for implied volatility</param>
            <param name="price">Price of the option, pass <see langword="null"/> for pricing from B/S</param>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.EuropeanCallOption.StockPrice">
            <summary>
            Current stock price
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.EuropeanCallOption.StockDivd">
            <summary>
            Dividend yield of the underlying stock
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.EuropeanCallOption.Strike">
            <summary>
            Strike price of this option
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.EuropeanCallOption.Sigma">
            <summary>
            Volatility of the stock
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.EuropeanCallOption.RiskFree">
            <summary>
            Risk free rate
            </summary>
        </member>
        <member name="T:MathFuncConsole.MathObjects.Applications.ExchangeOption">
            <summary>
            Implementation of exchange options. Use Margrabe Formula to price.
            </summary>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.ExchangeOption.#ctor(System.String,MathFuncConsole.MathObjects.Applications.Stock,MathFuncConsole.MathObjects.Applications.Stock,System.Object,System.Object)">
            <summary>
            Initial instance of <see cref="T:MathFuncConsole.MathObjects.Applications.ExchangeOption"/> from two <see cref="T:MathFuncConsole.MathObjects.Applications.Stock"/>s. Use Margrabe Formula to price.
            </summary>
            <param name="name">Name of the deferred exchange option</param>
            <param name="s1">Asset to be received</param>
            <param name="s2">Asset to be delivered</param>
            <param name="rho">Correlation between two assets</param>
            <param name="maturity">Time to maturity of option</param>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.ExchangeOption.Rho">
            <summary>
            Correlation between two assets
            </summary>
        </member>
        <member name="T:MathFuncConsole.MathObjects.Applications.DeferredExchangeOption">
            <summary>
            Implementation of deferred exchange options. Use Margrabe Formula to price.
            </summary>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.DeferredExchangeOption.#ctor(System.String,MathFuncConsole.MathObjects.Applications.Stock,MathFuncConsole.MathObjects.Applications.Stock,System.Object,System.Object,System.Object)">
            <summary>
            Initial instance of <see cref="T:MathFuncConsole.MathObjects.Applications.DeferredExchangeOption"/> from two <see cref="T:MathFuncConsole.MathObjects.Applications.Stock"/>s. Use Margrabe Formula to price.
            </summary>
            <param name="name">Name of the deferred exchange option</param>
            <param name="s1">Asset to be received</param>
            <param name="s2">Asset to be delivered</param>
            <param name="rho">Correlation between two assets</param>
            <param name="optionMaturity">Time to maturity of option</param>
            <param name="exchangeMaturity">Time until exchange >= TOption</param>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.DeferredExchangeOption.ExchangeMaturity">
            <summary>
            Maturity of the option
            </summary>
        </member>
        <member name="T:MathFuncConsole.MathObjects.Applications.GenericOption">
            <summary>
            A generic implementation of <see cref="T:MathFuncConsole.MathObjects.Applications.Option"/>. Using generalized Black-Scholes Formula.
            </summary>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.GenericOption.#ctor(System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Initial instance of <see cref="T:MathFuncConsole.MathObjects.Applications.GenericOption"/> 
            </summary>
            <param name="name">Name of the option</param>
            <param name="pv1">Present value of asset to be received</param>
            <param name="pv2">Present value of asset to be delivered</param>
            <param name="maturity">Time to maturity</param>
            <param name="sigma">Volatility of the option (Pricing mode)</param>
            <param name="price">Price of the option (Imp_vol mode)</param>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.GenericOption.PriceFunc(System.Func{System.Double},System.Func{System.Double},System.Func{System.Double},System.Func{System.Double})">
            <summary>
            Pricing an genetic option by generalized Black-Scholes Formula.
            </summary>
            <param name="pv1">Present value of asset to be received</param>
            <param name="pv2">Present value of asset to be delivered</param>
            <param name="sigma">Volatility of the assets combined</param>
            <param name="maturity">Time to maturity</param>
            <returns></returns>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.GenericOption.Pv1">
            <summary>
            Present value of asset to be received
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.GenericOption.Pv2">
            <summary>
            Present value of asset to be delivered
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.GenericOption.Sigma">
            <summary>
            Volatility of the assets combined
            </summary>
        </member>
        <member name="T:MathFuncConsole.MathObjects.Applications.Bond">
            <summary>
            This is a demo for an arbitrary bond with/without coupons. Basic property of the bond (price, duration, convexity) are calculated automatically.
            </summary>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.Bond.#ctor(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Initial a new <see cref="T:MathFuncConsole.MathObjects.Applications.Bond"/> with following parameters, could be either static numbers or reference from other variables. 
            I use <see cref="T:System.Object"/> as input to allow you to pass in a number(<see cref="T:System.Double"/>/<see cref="T:System.Int32"/>) or 
            a <see cref="T:System.Func`1"/>(whose generic type argument is <see cref="T:System.Double"/>, as you will get from any other MathObject) 
            or null(use default value). Types other than these three will raise an <see cref="T:System.ArgumentException"/>. You can change any of
            these property later on as you do in any other place of C# but be sure to wrap any static number.
            <para>To help you with making your class/.ctor correctly, please read and understand this .ctor</para>
            </summary>
            <param name="name">This is only a name for the bond, no real meaning</param>
            <param name="face">Face value of the bond, by default it is 100</param>
            <param name="ytm">Yield To Maturity of this bond, not annualized, by default is 0</param>
            <param name="T">Maturity in terms of number of years, by default is 1</param>
            <param name="t0">Time point of pricing, in term of years, by default is 0(now)</param>
            <param name="coupon">Coupon Rate per year, by default is 0(discount bond)</param>
            <param name="paytimes">Coupon frequency in terms of times per year, by default is 1</param>
            <exception cref="T:System.ArgumentException">If you pass in a parameter of a wrong type</exception>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Bond.F">
            <summary>
            >Face value of the bond
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Bond.T">
            <summary>
            Maturity in terms of number of years
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Bond.Ytm">
            <summary>
            Yield To Maturity of this bond, not annualized
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Bond.C">
            <summary>
            Coupon Rate per year
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Bond.M">
            <summary>
            Coupon frequency in terms of times per year
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Bond.T0">
            <summary>
            Time point of pricing, in term of years
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Bond.Cp">
            <summary>
            Coupon payment each term
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Bond.P">
            <summary>
            Bond price at the time of <see cref="P:MathFuncConsole.MathObjects.Applications.Bond.T0"/>
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Bond.D">
            <summary>
            Duration of the Bond
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Bond.Dm">
            <summary>
            Modified duration of the bond
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Bond.Cov">
            <summary>
            Convexity of the bond
            </summary>
        </member>
        <member name="T:MathFuncConsole.MathObjects.Applications.Option">
            <summary>
            Base type of any options. You should not make any instances directly from <see cref="T:MathFuncConsole.MathObjects.Applications.Option"/>.
            Please refer to <seealso cref="T:MathFuncConsole.MathObjects.Applications.GenericOption"/> for implementing an option
            </summary>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.Option.#ctor(System.String,System.Object)">
            <summary>
            Initial instance for <see cref="T:MathFuncConsole.MathObjects.Applications.Option"/>. You should not call this directly. 
            </summary>
            <param name="name">Name of the option</param>
            <param name="maturity">Maturity of the option</param>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Option.Maturity">
            <summary>
            Maturity of the option
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Option.Price">
            <summary>
            Price of the option. No default pricing in <see cref="T:MathFuncConsole.MathObjects.Applications.Option"/>.
            </summary>
        </member>
        <member name="T:MathFuncConsole.MathObjects.Applications.Yield">
            <summary>
            A wrap up for yield, also provide its multiple casting between types of yield.
            </summary>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.Yield.#ctor(System.String,System.Object)">
            <summary>
            Initial instance of <see cref="T:MathFuncConsole.MathObjects.Applications.Yield"/> from yield to maturity
            </summary>
            <param name="name"></param>
            <param name="ytm"></param>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Yield.Ytm">
            <summary>
            Yield in terms of YTM, not annualized
            </summary>
        </member>
        <member name="T:MathFuncConsole.MathObjects.Applications.Stock">
            <summary>
            A stock with/without constant dividend yield.
            </summary>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Applications.Stock.#ctor(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Initial instance of <see cref="T:MathFuncConsole.MathObjects.Applications.Stock"/>.
            </summary>
            <param name="name">Name of the stock</param>
            <param name="price">Price of the stock at time 0</param>
            <param name="sigma">Volatility of the stock return</param>
            <param name="miu">Drift of the stock return in real world</param>
            <param name="divd">Dividend yield of the stock</param>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Stock.Price">
            <summary>
            Price of the stock at time 0
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Stock.Divd">
            <summary>
            Dividend yield of the stock
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Stock.Miu">
            <summary>
            Drift of the stock return in real world
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.Applications.Stock.Sigma">
            <summary>
            Volatility of the stock return
            </summary>
        </member>
        <member name="T:MathFuncConsole.MathObjects.Helper.Bisection">
            <summary>
            Helper class of bisection method for backing out implied variable from complex but monotonic function.
            </summary>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Helper.Bisection.Search(System.Func{System.Double,System.Double},System.Double,System.,System.Double)">
            <summary>
            General bisection method designed for <see cref="T:MathFuncConsole.MathObjects.MathObject"/>. This function is designed for
            internal use inside sub-classes of <see cref="T:MathFuncConsole.MathObjects.MathObject"/>. Check .ctor of <seealso cref="T:MathFuncConsole.MathObjects.Applications.GenericOption"/> 
            for how to use this method to back out implied volatility from option price.
            </summary>
            <param name="updateFunc">Function that update dependent variable, should be a remote link between properties in <see cref="T:MathFuncConsole.MathObjects.MathObject"/></param>
            <param name="target">Target value to be obtained by dependent variable by changing independent variable</param>
            <param name="range"><see cref="T:System.ValueTuple"/> that contains lower and upper bound of the searching scope</param>
            <param name="eps">Tolerance of the dependent variable and searching scope, by default is <see langword="1E-5"/></param>
            <returns></returns>
        </member>
        <member name="T:MathFuncConsole.MathObjects.Helper.MonteCarloSimulation">
            <summary>
            Helper class for Monte-Carlo simulation methods
            </summary>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Helper.MonteCarloSimulation.GenerateSamples(System.Int32,System.Func{System.Double},System.Func{System.Double,System.Double,System.Double},System.Func{System.Double},System.Func{System.Double},System.Int64,System.Func{System.Double},System.Func{System.Double},System.Func{System.Double,System.Double,System.})">
            <summary>
            Generate sample function for any given random variable x under Normal distribution and cast it into 
            another random variable y
            </summary>
            <param name="n">Number of samples</param>
            <param name="x0">Initial value of x</param>
            <param name="yFunc">A function maps x to y</param>
            <param name="mu0">Initial mean of x</param>
            <param name="sigma0">Initial sigma of x</param>
            <param name="iter">Stages in a path</param>
            <param name="t0">Initial time</param>
            <param name="dt">Delta time</param>
            <param name="shiftFunc">Distribution shift function</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:MathFuncConsole.MathObjects.Helper.SimulatedAnnealing`1">
            <summary>
            Implementation of multi-thread Simulated Annealing Algorithm (SAA). Designed for searching numeric solution 
            or optimizing target function of <see cref="T:MathFuncConsole.MathObjects.MathObject"/>. 
            </summary>
            <typeparam name="T">Type of <see cref="T:MathFuncConsole.MathObjects.MathObject"/> you want to play with</typeparam>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Helper.SimulatedAnnealing`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{System.},System.Func{`0,System.Double},System.Double,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Initial instance of <see cref="T:MathFuncConsole.MathObjects.Helper.SimulatedAnnealing`1"/>
            </summary>
            <param name="dummies">A set of identical dummy-<see cref="T:MathFuncConsole.MathObjects.MathObject"/>s that will work as a calculator 
            in its own <see cref="T:System.Threading.Tasks.Task"/>. SAA will be slower but more accurate if you have many dummies</param>
            <param name="xNames">Names of property from dummy as independent variables</param>
            <param name="ranges">Lower and upper bounds for each independent variables </param>
            <param name="objectiveFunc">Function that maps from a <see langword="T"/> to objection value. 
            For solving an equation, function should be set to error from target value. For optimizing, 
            function should be set for minimizing</param>
            <param name="temperature">Initial temperature for SAA. Model will converge slower with higher temperature</param>
            <param name="iters">Total iterations for each dummy. SAA will be slower but more accurate if you have more iterations</param>
            <param name="cooliter">Cooling interval for SAA</param>
            <param name="debug">If you want to see console print-off of each 1000 turns</param>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Helper.SimulatedAnnealing`1.#ctor(System.Object[],System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{System.},System.Func{`0,System.Double},System.Int32,System.Double,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Initial instance of <see cref="T:MathFuncConsole.MathObjects.Helper.SimulatedAnnealing`1"/>
            </summary>
            <param name="parameters">A object array that contains every parameters (including optional) to create an instance of <see langword="T"/></param>
            <param name="xNames">Names of property from dummy as independent variables</param>
            <param name="ranges">Lower and upper bounds for each independent variables </param>
            <param name="objectiveFunc">Function that maps from a <see langword="T"/> to objection value. 
            For solving an equation, function should be set to error from target value. For optimizing, 
            function should be set for minimizing</param>
            <param name="n">Number of dummies used in SAA</param>
            <param name="temperature">Initial temperature for SAA. Model will converge slower with higher temperature</param>
            <param name="iters">Total iterations for each dummy. SAA will be slower but more accurate if you have more iterations</param>
            <param name="cooliter">Cooling interval for SAA</param>
            <param name="debug">If you want to see console print-off of each 1000 turns</param>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Helper.SimulatedAnnealing`1.Run">
            <summary>
            Run SAA in the model
            </summary>
            <returns>Global minimum point and its value</returns>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Helper.SimulatedAnnealing`1.Trace(System.Int32)">
            <summary>
            Searching trace of this worker
            </summary>
            <param name="i">Worker id</param>
            <returns></returns>
        </member>
        <member name="T:MathFuncConsole.MathObjects.Helper.MathClassHelper">
            <summary>
            Helper class to implement extend methods for original data types. 
            Please feel free to add more useful non-type-specific methods here.
            </summary>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Helper.MathClassHelper.Wrap(System.Double)">
            <summary>
            Wrapper function for <see cref="T:System.Double"/>
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Helper.MathClassHelper.Wrap(System.Int32)">
            <summary>
            Wrapper function for <see cref="T:System.Int32"/>
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Helper.MathClassHelper.To``1(System.Object)">
            <summary>
            Shortcut to cast a obj from one type to another. Be careful of if these types can cast directly.
            </summary>
            <typeparam name="T">To type</typeparam>
            <param name="obj"></param>
            <returns><see longword="obj"/> as type of T</returns>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Helper.MathClassHelper.WithinTolerance(System.Double,System.Double,System.Double)">
            <summary>
            Check if this value is close to target.
            </summary>
            <param name="x">Value</param>
            <param name="target">Target value</param>
            <param name="eps">Absolute tolerance</param>
            <returns></returns>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Helper.MathClassHelper.ToStr(System.Collections.Generic.IEnumerable{System.Double},System.String)">
            <summary>
            Return string of a list of double
            </summary>
            <param name="list">List of double</param>
            <param name="join">Separator between numbers</param>
            <returns></returns>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Helper.MathClassHelper.ToStr(System.Collections.Generic.IEnumerable{System.})">
            <summary>
            Return string of a list of xs and y
            </summary>
            <param name="trace">List of xs and y</param>
            <returns></returns>
        </member>
        <member name="T:MathFuncConsole.MathObjects.Helper.NormalDist">
            <summary>
            Helper class for Normal Distribution
            </summary>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Helper.NormalDist.NormDist(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Work as the same as Excel function NORMDIST(...)
            </summary>
            <param name="x">Value of input</param>
            <param name="mean">Mean of the Normal Distribution</param>
            <param name="std">Standard deviation for the Normal Distribution</param>
            <param name="cumulative">Return CDF or PDF</param>
            <returns></returns>
        </member>
        <member name="M:MathFuncConsole.MathObjects.Helper.NormalDist.NextSample(System.Double,System.Double)">
            <summary>
            Generate samples from normal distribution
            </summary>
            <param name="mu">Mean of the normal distribution</param>
            <param name="sigma">Standard deviation of the normal distribution</param>
            <returns></returns>
        </member>
        <member name="T:MathFuncConsole.MathObjects.MathObject">
            <summary>
            The base class for all math objects. It provides multiple suppository method to deal with input/cast/print stuff.
            You shouldn't have any instance of <see cref="T:MathFuncConsole.MathObjects.MathObject"/> in your code in most cases. 
            You are recommended to inherit from it and develop your own sub-class. Check <seealso cref="T:MathFuncConsole.MathObjects.Applications.Bond"/> as a template for both
            writing your class and XML document to help others.
            </summary>
        </member>
        <member name="P:MathFuncConsole.MathObjects.MathObject.Name">
            <summary>
            Name of this <see cref="T:MathFuncConsole.MathObjects.MathObject"/>, only used in print-out.
            </summary>
        </member>
        <member name="M:MathFuncConsole.MathObjects.MathObject.#ctor(System.String)">
            <summary>
            Initial new instance of <see cref="T:MathFuncConsole.MathObjects.MathObject"/>. You shouldn't call this method directly but to inherit it.
            </summary>
            <param name="name">Name of the <see cref="T:MathFuncConsole.MathObjects.MathObject"/> for print-out</param>
        </member>
        <member name="M:MathFuncConsole.MathObjects.MathObject.RemoteSetter(System.String)">
            <summary>
            Universal setter method without reference to the instance. To set value, input must be <see cref="T:System.Double"/>.
            Please use direct setters as much as possible. Remote setter is designed for generic computation methods.
            </summary>
            <param name="propertyName">Name of the target property</param>
            <returns>A setter that you can assign new value to target property</returns>
        </member>
        <member name="M:MathFuncConsole.MathObjects.MathObject.RemoteGetter(System.String)">
            <summary>
            Universal getter method without reference to the instance. 
            Please use direct getter as much as possible. Remote setter is designed for generic computation methods.
            </summary>
            <param name="propertyName">Name of the target property</param>
            <returns>A getter that you can get new value from target property</returns>
        </member>
        <member name="M:MathFuncConsole.MathObjects.MathObject.RemoteLink(System.String,System.String,System.Nullable{System.Double})">
            <summary>
            Universal abstraction for inner relationship between two properties in this instance. This method build up a function that 
            can help you get a new value of the dependent variable when you change the value of the independent variable. Input value should 
            always be <see cref="T:System.Double"/> and return types is also <see cref="T:System.Double"/>. Remote link is designed for generic computation methods.
            </summary>
            <param name="xName">Name of the target property that act as independent variable</param>
            <param name="yName">Name of the target property that act as dependent variable</param>
            <param name="defaultX">If set, after every calculations, x will be reset to this value.</param>
            <returns>A function of mapping independent variable to dependent variable</returns>
        </member>
        <member name="M:MathFuncConsole.MathObjects.MathObject.ToString">
            <inheritdoc />
        </member>
        <member name="M:MathFuncConsole.MathObjects.MathObject.Wrap(System.Double)">
            <summary>
            Wrap a <see cref="T:System.Double"/> to a <see cref="T:System.Func`1"/>. 
            You should use <see cref="M:MathFuncConsole.MathObjects.MathObject.Input(System.Object,System.Nullable{System.Double})"/> to cast input instead of use this function explicitly.
            </summary>
            <param name="num"></param>
            <returns>a <see cref="T:System.Func`1"/>, whose generic type argument is <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:MathFuncConsole.MathObjects.MathObject.Input(System.Object,System.Nullable{System.Double})">
            <summary>
            To cast an input to what is should be (a <see cref="T:System.Func`1"/>, whose generic type argument is <see cref="T:System.Double"/>).
            You should use this function in your .ctor for every parameters input to enlarge flexibility. Only types that can cast to 
            a <see cref="T:System.Double"/> or a <see cref="T:System.Func`1"/> that returns a <see cref="T:System.Double"/> or null are accepted.
            </summary>
            <exception cref="T:System.ArgumentException">If you pass in a input with wrong type</exception>
            <exception cref="T:System.ArgumentNullException">If you pass in a null and provide no default result</exception>
            <param name="obj">Input parameter</param>
            <param name="def">Default result when input is null, can be null itself, but then you have to be careful with possible input.</param>
            <returns>a <see cref="T:System.Func`1"/>, whose generic type argument is <see cref="T:System.Double"/></returns>
        </member>
    </members>
</doc>
